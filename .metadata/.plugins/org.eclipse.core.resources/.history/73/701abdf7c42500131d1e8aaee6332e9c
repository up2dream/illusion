package illusion.base;

/**
 * @author HuBin1
 *
 */
public class Point3D {
	
	// ===========================================================
	// Constants
	// ===========================================================

	// ===========================================================
	// Fields
	// ===========================================================

	private float tuple[] = new float[4];
	
	// ===========================================================
	// Constructors
	// ===========================================================

	public Point3D() {
		tuple[3] = 1;
	}
	
	public Point3D(float x, float y, float z) {
		this();
		
		tuple[0] = x;
		tuple[1] = y;
		tuple[2] = z;
	}
	
	// ===========================================================
	// Getter & Setter
	// ===========================================================

	public float x() {
		return tuple[0];
	}
	
	public void x(int x) {
		tuple[0] = x;
	}
	
	public float y() {
		return tuple[1];
	}
	
	public void y(int y) {
		tuple[1] = y;
	}
	
	public float z() {
		return tuple[2];
	}
	
	public void z(int z) {
		tuple[2] = z;
	}
	
	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================

	@Override
	public boolean equals(Object val) {
		if (val == null) {
			return false;
		}
		
		if (!(val instanceof HPoint)) {
			return false;
		}
		
		HPoint valPt = (HPoint)val;
		return tuple[0]==valPt.tuple[0] && tuple[1]==valPt.tuple[1] && tuple[2]==valPt.tuple[2];
	}
	
	@Override
	public int hashCode() {
		return Float.valueOf(tuple[0]).hashCode() ^ Float.valueOf(tuple[1]).hashCode() ^ Float.valueOf(tuple[2]).hashCode();
	}
	
	// ===========================================================
	// Methods
	// ===========================================================

	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================

}
